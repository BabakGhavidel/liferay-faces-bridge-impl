/**
 * Copyright (c) 2000-2016 Liferay, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.liferay.faces.bridge.application.view.internal;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;

import javax.portlet.MimeResponse;
import javax.portlet.faces.Bridge;
import javax.portlet.faces.BridgeWriteBehindResponse;
import javax.servlet.ServletResponse;

import com.liferay.faces.bridge.filter.internal.MimeResponseWrapper;
import com.liferay.faces.util.logging.Logger;
import com.liferay.faces.util.logging.LoggerFactory;


/**
 * <p>Section 7.5.2 of the JSF specification requires that JSP-based views have the ability to interleave native HTML
 * markup with the markup generated by JSF component. But as described in Section 6.2.1 of the Portlet Bridge Spec,
 * there is no standard way of supporting this in the JSF API. However, the Portlet Bridge Spec however requires that
 * one part of the interleaving process be supported by the bridge, specifically {@link Bridge#AFTER_VIEW_CONTENT}. This
 * feature is responsible for rendering of markup that appears after the closing </f:view> component tag.</p>
 *
 * <p>The Portlet Bridge Spec requires that the {@link Bridge#AFTER_VIEW_CONTENT} feature be supported by implementing
 * the {@link BridgeWriteBehindResponse} interface. However with it is possible to have the JSF implementation (Mojarra
 * or MyFaces) handle the entire interleaving process by itself. So although this class implements the {@link
 * BridgeWriteBehindResponse} interface, it only does so for the sake of completeness. The corresponding methods
 * implemented in this class throw {@link UnsupportedOperationException} which is OK since they will never be
 * called.</p>
 *
 * <p>In order to have the JSF implementation handle the entire interleaving process by itself, it is necessary to
 * overcome some Servlet API dependencies. As part of this mechanism, the {@link #getPortletOutputStream()} and {@link
 * #getWriter()} methods in this class delegate writing of the response to the underlying {@link ServletResponse}.</p>
 *
 * @author  Neil Griffin
 */
public class BridgeWriteBehindResponseMimeImpl extends MimeResponseWrapper implements BridgeWriteBehindResponse {

	// Public Constants
	public static final String AFTER_VIEW_CONTENT_RESPONSE = "afterViewContentResponse";

	// Private Constants
	private static final String WEBLOGIC = "weblogic";

	// Logger
	private static final Logger logger = LoggerFactory.getLogger(BridgeWriteBehindResponseMimeImpl.class);

	// Private Data Members
	private ServletResponse wrappedServletResponse;

	public BridgeWriteBehindResponseMimeImpl(MimeResponse mimeResponse, ServletResponse servletResponse) {
		super(mimeResponse);
		this.wrappedServletResponse = servletResponse;
	}

	/**
	 * This method is required by the {@link BridgeWriteBehindResponse} interface but is no longer necessary for JSF 2.
	 */
	public void flushMarkupToWrappedResponse() throws IOException {
		throw new UnsupportedOperationException();
	}

	/**
	 * This method is required by the {@link BridgeWriteBehindResponse} interface but is no longer necessary for JSF 2.
	 */
	public boolean hasFacesWriteBehindMarkup() {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setBufferSize(int size) {

		try {
			super.setBufferSize(size);
		}
		catch (IllegalStateException e) {

			boolean rethrow = true;
			StackTraceElement[] stackTrace = e.getStackTrace();

			for (StackTraceElement stackTraceElement : stackTrace) {

				if (stackTraceElement.getClassName().contains(WEBLOGIC)) {
					rethrow = false;

					break;
				}
			}

			if (rethrow) {
				throw e;
			}
		}
	}

	/**
	 * This method is required by the {@link BridgeWriteBehindResponse} interface but is no longer necessary for JSF 2.
	 */
	public byte[] getBytes() {
		throw new UnsupportedOperationException();
	}

	/**
	 * This method is required by the {@link BridgeWriteBehindResponse} interface but is no longer necessary for JSF 2.
	 */
	public char[] getChars() {
		throw new UnsupportedOperationException();
	}

	@Override
	public OutputStream getPortletOutputStream() throws IOException {
		OutputStream outputStream = wrappedServletResponse.getOutputStream();

		if (logger.isTraceEnabled()) {
			logger.trace("getPortletOutputStream() called by method=[{0}]",
				Thread.currentThread().getStackTrace()[3].toString());
			logger.trace("getPortletOutputStream() returnValue=[{0}]", outputStream);
		}

		return outputStream;
	}

	/**
	 * This method is required by the {@link BridgeWriteBehindResponse} interface but is no longer necessary for JSF 2.
	 */
	public boolean isBytes() {
		throw new UnsupportedOperationException();
	}

	/**
	 * This method is required by the {@link BridgeWriteBehindResponse} interface but is no longer necessary for JSF 2.
	 */
	public boolean isChars() {
		throw new UnsupportedOperationException();
	}

	@Override
	public PrintWriter getWriter() throws IOException {

		PrintWriter writer = wrappedServletResponse.getWriter();

		if (logger.isTraceEnabled()) {
			logger.trace("getWriter() called by method=[{0}]", Thread.currentThread().getStackTrace()[3].toString());
			logger.trace("getWriter() returnValue=[{0}]", writer);
		}

		return writer;
	}

}
